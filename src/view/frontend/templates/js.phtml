<script>
    document.addEventListener('alpine:init', () => {
        Alpine.store('drawer', {
            states: {},

            state(id) {
                if (this.states[id] === undefined) {
                    this.states[id] = false;
                }
                return this.states[id];
            },

            toggle(id, scrollLock = true) {
                if (this.states[id] === undefined) {
                    this.states[id] = false;
                }
                this.states[id] = !this.states[id];

                if (scrollLock) {
                    this.scrollLock(this.states[id]);
                }
            },

            open(id, scrollLock = true) {
                let $dialog = document.getElementById(id);
                $dialog.showModal();
                this.states[id] = true;

                if (scrollLock) {
                    this.scrollLock(true);
                }
            },

            close(id) {
                let $dialog = document.getElementById(id);
                $dialog.close();
                this.states[id] = false;
                this.scrollLock(false);
            },

            closeAll() {
                for (const [key, value] of Object.entries(this.states)) {
                    document.getElementById(key).close();
                    this.states[key] = false;
                }

                this.scrollLock(false);
            },

            scrollLock(use = true) {
                document.body.style.overflow = use ? 'hidden' : '';
            },
        });
    });

    function drawerState(id) {
        return Alpine.store('drawer').state(id);
    }

    function drawerToggle(id, scrollLock = true) {
        Alpine.store('drawer').toggle(id, scrollLock);
    }

    function drawerOpen(id, scrollLock = true) {
        Alpine.store('drawer').open(id, scrollLock);
    }

    function drawerClose(id) {
        Alpine.store('drawer').close(id);
    }

    function drawerCloseAll() {
        Alpine.store('drawer').closeAll();
    }
</script>